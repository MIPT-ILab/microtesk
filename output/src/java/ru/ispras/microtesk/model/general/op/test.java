/*
 * Copyright (c) ISPRAS
 * 
 * Institute for System Programming of Russian Academy of Sciences
 * 
 * 25 Alexander Solzhenitsyn st. Moscow 109004 Russia
 * 
 * All rights reserved.
 * 
 * This file was automatically generated by MicroTEST based on the
 * information contained in the 'general.nml' specification file.
 * 
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.general.op;

import java.util.Map;
import java.math.BigInteger;
import ru.ispras.microtesk.model.api.instruction.IOperation;
import ru.ispras.microtesk.model.api.instruction.Operation;
import ru.ispras.microtesk.model.api.ArgumentMode;
import ru.ispras.microtesk.model.api.type.*;
import ru.ispras.microtesk.model.api.data.*;
import ru.ispras.microtesk.model.api.memory.*;
import ru.ispras.microtesk.model.api.instruction.IAddressingMode;
import ru.ispras.microtesk.model.general.mode.*;

import static ru.ispras.microtesk.model.general.shared.Shared.*;

public final class test extends Operation {
  private static final class Info extends InfoAndRule {
    Info()
    {
        super(
           test.class,
           "test",
           false,
           new ParamDecls()
               .declareParam("m", ArgumentMode.NA, MMM.INFO),
           new Shortcuts()
               .addShortcut(new Info_instruction(), "#root")
        );
    }

    @Override
    public IOperation create(Map<String, Object> args)
    {
        final IAddressingMode m = (IAddressingMode) getArgument("m", args);

        return new test(m);
    }
  }

  private static final class Info_instruction extends InfoAndRule {
    Info_instruction()
    {
        super(
            instruction.class,
            "test",
            true,
            new ParamDecls()
                .declareParam("m", ArgumentMode.NA, MMM.INFO)
        );
    }

    @Override
    public IOperation create(Map<String, Object> args)
    {
        final IAddressingMode m = (IAddressingMode) getArgument("m", args);

        return new instruction(
            new test(
                m
            )
        );
    }
  }

  public static final IInfo INFO = new Info();

  private final IAddressingMode m;

  public test(IAddressingMode m)
  {
      assert MMM.INFO.isSupported(m);

      this.m = m;
  }

  @Override
  public String syntax()
  {
      return "test";
  }

  @Override
  public String image()
  {
      return "0010";
  }

  @Override
  public void action()
  {
      TEST_REG1.access(0x0).store(DataEngine.execute(EOperatorID.PLUS, TEST_REG1.access(0x0).bitField(0x0, 0x1f).load(), DataEngine.valueOf(DWORD, 0x1)));
      TEST_REG1.access(0x1).store(DataEngine.execute(EOperatorID.PLUS, TEST_REG1.access(0x1).bitField(0x8, 0x8).load(), DataEngine.valueOf(Type.CARD(0x1), 0x1)));
      TEST_REG1.access(0x1).store(DataEngine.execute(EOperatorID.PLUS, TEST_REG1.access(0x1).bitField(0x1 + DataEngine.intValue(TEST_REG2.access().load()) - 0x1, 0x1 + DataEngine.intValue(TEST_REG2.access().load()) + 0x5).load(), DataEngine.valueOf(Type.CARD(0x7), 0x1)));
  }
}
