/*
 * Copyright (c) ISPRAS
 * 
 * Institute for System Programming of Russian Academy of Sciences
 * 
 * 25 Alexander Solzhenitsyn st. Moscow 109004 Russia
 * 
 * All rights reserved.
 * 
 * This file was automatically generated by MicroTEST based on the
 * information contained in the 'large_addr.nml' specification file.
 * 
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.large_addr.op;

import java.util.Map;
import java.math.BigInteger;
import ru.ispras.microtesk.model.api.instruction.IOperation;
import ru.ispras.microtesk.model.api.instruction.Operation;
import ru.ispras.microtesk.model.api.ArgumentMode;
import ru.ispras.microtesk.model.api.type.*;
import ru.ispras.microtesk.model.api.data.*;
import ru.ispras.microtesk.model.api.memory.*;
import ru.ispras.microtesk.model.api.instruction.IAddressingMode;
import ru.ispras.microtesk.model.large_addr.mode.*;
import ru.ispras.microtesk.model.api.memory.Location;

import static ru.ispras.microtesk.model.large_addr.shared.Shared.*;

public final class lw48 extends Operation {
  private static final class Info extends InfoAndRule {
    Info()
    {
        super(
           lw48.class,
           "lw48",
           true,
           new ParamDecls()
               .declareParam("rd", ArgumentMode.OUT, r48.INFO)
               .declareParam("addr", WORD48));
    }

    @Override
    public IOperation create(Map<String, Object> args)
    {
        final IAddressingMode rd = (IAddressingMode) getArgument("rd", args);
        final Location addr = (Location) getArgument("addr", args);

        return new lw48(rd, addr);
    }
  }

  public static final IInfo INFO = new Info();

  private final IAddressingMode rd;
  private final Location addr;

  public lw48(IAddressingMode rd, Location addr)
  {
      assert r48.INFO.isSupported(rd);
      assert WORD48.equals(addr.getType());

      this.rd = rd;
      this.addr = addr;
  }

  @Override
  public String syntax()
  {
      return String.format("lw48 %s, %x", rd.syntax(), addr.load().getRawData().longValue());
  }

  @Override
  public void action()
  {
      rd.access().store(M48.access(addr.load()).load());
  }
}
