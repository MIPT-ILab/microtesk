<?xml version="1.0" encoding="utf-8"?>
<project name="microtesk" default="build.all" basedir=".">

  <!-- Directories -->
  <property name="src"       location="src/main/java"/>
  <property name="src.mmu"   location="src/main/mmu/java"/>
  <property name="src.test"  location="src/test/java"/>
  <property name="res"       location="src/main/resources"/>
	
  <property name="gen"       location="gen"/>
  <property name="out"       location="output"/>
  <property name="bin"       location="bin"/>

  <property name="dist"      location="dist"/>
  <property name="dist.jars" location="${dist}/libs/jars"/>
  <property name="doc"       location="${dist}/javadoc"/>

  <property name="microtesk.bin" value="${bin}/microtesk"/>
  <property name="test.bin"      value="${bin}/tests"/>	

  <!-- Output JAR-file -->
  <property name="jar"           value="microtesk.jar"/>
  <!-- Main package -->
  <property name="root.package"  value="ru"/>
  <property name="main.package"  value="${root.package}/ispras/microtesk"/>

  <!-- External JARs -->
  <property name="junit.jar"     value="junit-4.10.jar"/>
  <property name="antlr.jar"     value="antlr-3.4-complete.jar"/>
  <property name="antlr.ant.jar" value="ant-antlr3.jar"/>
  <property name="cli.jar"       value="commons-cli-1.2.jar"/>
  <property name="jruby.jar"     value="jruby.jar"/>
  <property name="fortress.jar"  value="fortress.jar"/>

  <!-- Information for the JAR manifest -->
  <property name="jar.mainclass" value="ru.ispras.microtesk.MicroTESK"/>	
  <property name="jar.classpath" value="${antlr.jar} ${cli.jar} ${jruby.jar} ${fortress.jar}"/>

  <!-- Classpath for external libraries -->
  <property name="jars.path" value="./jars"/>
  <property name="classpath" value="${jars.path}/${junit.jar}:${jars.path}/${antlr.jar}:${jars.path}/${antlr.ant.jar}:${jars.path}/${cli.jar}:${jars.path}/${jruby.jar}:${jars.path}/${fortress.jar}"/>
	
  <!-- Options -->
  <property name="debug" value="false"/>

  <!-- Macro for ANTRL targets -->
  <macrodef name="antlr3">
  	<attribute name="grammar.root"/>
  	<attribute name="grammar.path"/>
    <attribute name="grammar.name"/>
	<sequential>
	  <echo message="antlr @{grammar.name}"/>
	  <antlr:ant-antlr3
	    xmlns:antlr="antlib:org/apache/tools/ant/antlr"
	    target="@{grammar.root}/@{grammar.path}/@{grammar.name}"
	    outputdirectory="${gen}/@{grammar.path}"
	    debug="${debug}">
	    <classpath>
	      <pathelement path="${classpath}"/>
	    </classpath>
	  </antlr:ant-antlr3>
    </sequential>
  </macrodef>

  <!-- Init target, creates dirs -->
  <target name="init">
    <mkdir dir="${gen}/${simnml_grammar.path}"/>
	<mkdir dir="${gen}/${mmu_grammar.path}"/>
	<mkdir dir="${bin}"/>
	<mkdir dir="${dist}"/>
  </target>

  <!-- Clean target, removes builded dirs and files -->
  <target name="clean">
    <delete dir="${dist}"/>
    <delete dir="${bin}"/>
  	<delete includeEmptyDirs="true"><fileset dir="${gen}" includes="**/*"/></delete>
  	<delete includeEmptyDirs="true"><fileset dir="${out}" includes="**/*"/></delete>
  	<delete dir="target"/>
  </target>

  <!-- Target for generating parsers for Sim-nML code from grammars with ANTLR -->
  <property name="simnml_grammar.package" value="translator/simnml/grammar"/>
  <property name="simnml_grammar.path"    value="${main.package}/${simnml_grammar.package}"/>
  <property name="simnml_lexer.name"      value="SimnMLLexer.g"/>
  <property name="simnml_parser.name"     value="SimnMLParser.g"/>
  <property name="simnml_walker.name"     value="SimnMLTreeWalker.g"/>

  <target name="antlr_simnml">
    <antlr3 grammar.name="${simnml_lexer.name}"  grammar.path="${simnml_grammar.path}" grammar.root="${src}"/>
  	<antlr3 grammar.name="${simnml_parser.name}" grammar.path="${simnml_grammar.path}" grammar.root="${src}"/>
  	<antlr3 grammar.name="${simnml_walker.name}" grammar.path="${simnml_grammar.path}" grammar.root="${src}"/>
  </target>

  <!-- Target for generating parsers for MMU specification code from grammars with ANTLR -->
  <property name="mmu_grammar.package" value="translator/mmu/grammar"/>
  <property name="mmu_grammar.path"    value="${main.package}/${mmu_grammar.package}"/>
  <property name="mmu_lexer.name"      value="MMuLexer.g"/>
  <property name="mmu_parser.name"     value="MMuParser.g"/>
  <property name="mmu_walker.name"     value="MMuTreeWalker.g"/>

  <target name="antlr_mmu">
    <antlr3 grammar.name="${mmu_lexer.name}"  grammar.path="${mmu_grammar.path}" grammar.root="${src.mmu}"/>
    <antlr3 grammar.name="${mmu_parser.name}" grammar.path="${mmu_grammar.path}" grammar.root="${src.mmu}"/>
  	<antlr3 grammar.name="${mmu_walker.name}" grammar.path="${mmu_grammar.path}" grammar.root="${src.mmu}"/>
  </target>	

  <!-- JavaDoc target, generates documentation for source code in ${src} and places it into ${doc} -->
  <target name="javadoc" depends="init,antlr_simnml">
    <mkdir dir="${doc}"/> 
    <javadoc
      sourcepath="${src}:${gen}"
      destdir="${doc}"
      classpath="${classpath}"
      author="true"
    />
  </target>

  <!-- JavaDoc target, generates documentation for source code in ${src} and ${src.mmu} and places it into ${doc} -->
  <target name="javadoc_mmu" depends="init,antlr_simnml,antlr_mmu">
    <mkdir dir="${doc}"/> 
    <javadoc
      sourcepath="${src}:${src.mmu}:${gen}"
      destdir="${doc}"
      classpath="${classpath}"
      author="true"
    />
  </target>

  <!-- Compiles with Javac source code in the ${src} folder (main functionality of MicroTESK) --> 	
  <target name="javac.main">
     <mkdir dir="${microtesk.bin}"/>
     <javac
       srcdir="${src}:${gen}"
       destdir="${microtesk.bin}"
       excludes="**/mmu/**"
       classpath="${classpath}"
       includeantruntime="false"
       deprecation="true"
    />
  </target>

  <!-- Compiles with Javac source code in the ${src} and ${src.mmu} folders (main functionality + MMU support) --> 	
  <target name="javac.mmu">
     <mkdir dir="${microtesk.bin}"/>
     <javac
       srcdir="${src}:${src.mmu}:${gen}"
       destdir="${microtesk.bin}"
       classpath="${classpath}"
       includeantruntime="false"
       deprecation="true"
    />
  </target>

  <!-- Compiles with Javac source code of unit tests located in the ${src.test} folder --> 	
  <target name="javac.test">
     <mkdir dir="${test.bin}"/>
     <javac
       srcdir="${src.test}"
       destdir="${test.bin}"
       classpath="${classpath}:${dist.jars}/${jar}"
       includeantruntime="false"
       deprecation="true"
    />
  </target>

  <!-- Build microtesk.jar from provided object files. -->
  <target name="microtesk.jar">
    <jar destfile="${dist.jars}/${jar}" basedir="${microtesk.bin}">
      <fileset dir="${res}"/>
      <manifest>
        <attribute name="Main-Class" value="${jar.mainclass}"/>
        <attribute name="Class-Path" value="${jar.classpath}"/>
      </manifest>
    </jar>
  </target>

  <target name="build.jar" depends="antlr_simnml,javac.main,microtesk.jar"/>
  <target name="build.jar.mmu" depends="antlr_simnml,antlr_mmu,javac.mmu,microtesk.jar"/>
	
  <!-- Copies required text files (Ruby and Bash scripts, nML files to the distributive folder -->
  <target name="copy.scripts">

    <!-- Copies Ruby scripts -->
    <copy todir="${dist}/libs/ruby" >  
      <fileset dir="src/main/ruby" includes="**"/>  
    </copy>

    <!-- Copies batch files -->
    <copy todir="${dist}/bin">
      <fileset dir="src/main/scripts" includes="**"/>  
    </copy>

    <!-- Copies examples of architecture specifications and test templates -->
    <copy todir="${dist}/arch">
      <fileset dir="src/main/arch" includes="**"/>  
    </copy>

  </target>

  <target name="build.all" depends="clean,init,build.jar,copy.scripts,javadoc">

  	<!-- Copies JAR dependencies to the distributive folder -->
  	<copy file="${jars.path}/${antlr.jar}"    todir="${dist.jars}"/>
  	<copy file="${jars.path}/${cli.jar}"      todir="${dist.jars}"/>
  	<copy file="${jars.path}/${jruby.jar}"    todir="${dist.jars}"/>
  	<copy file="${jars.path}/${fortress.jar}" todir="${dist.jars}"/>

  	<!-- Copies MicroTESK documentation to the distributive folder -->
  	<copy todir="${dist}/xdocs">
  	   <fileset dir="xdocs" includes="**"/>  
  	</copy>

  </target>

  <!-- Target for building models -->
  <target name="models.jar">
    <property name="models.classpath"     value="${dist}/${jar}"/>
    <property name="models.jar.classpath" value="${jar}"/>
    <property name="models.bin"           value="${bin}/models"/>
    <property name="models.jar"           value="${dist}/models.jar"/>

    <mkdir dir="${models.bin}"/>
    <javac
      srcdir="${out}"
      destdir="${models.bin}"
      classpath="${models.classpath}"
      includeantruntime="false"
    />

    <jar destfile="${models.jar}" basedir="${models.bin}">
      <manifest>
        <!-- <attribute name="Main-Class" value="${jar.mainclass}"/> -->
        <attribute name="Class-Path" value="${models.jar.classpath}"/>
      </manifest>
    </jar>
  </target>

  <!-- Test target (compile and run JUnit tests) -->
  <target name="test" depends="javac.test">
    <path id="classpath.test">
      <pathelement location="jars/junit-4.10.jar"/>
      <pathelement location="${test.bin}"/>
      <pathelement location="${dist.jars}/${jar}"/>
    </path>

  	<mkdir dir="target/tests/reports"/>

    <junit fork="no" printsummary="yes" showoutput="yes">
      <classpath refid="classpath.test"/>
      <formatter type="plain" usefile="false"/>
      <formatter type="xml" usefile="true"/>

      <batchtest haltonfailure="no" todir="target/tests/reports">
        <fileset dir="${src.test}" includes="**/*TestCase*.java"/>
      </batchtest>
    </junit>
  </target>

</project>
