<?xml version="1.0" encoding="utf-8"?>

<!--
 * Copyright 2014-2015 ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
  -->

<project name="microtesk" default="build.all" basedir=".">

  <property name="buildbase.dir" value="tools/buildbase"/>

  <fail>
  Please, prepare build environment:
  1. run 'ant -f setup.xml' to get latest BuildBase build script.
  2. run Ant again
    <condition>
      <not>
        <available file="${buildbase.dir}/buildbase.xml"/>
      </not>
    </condition>
  </fail>

  <import file="${buildbase.dir}/buildbase.xml"/>

  <!-- Exported properties -->
  <property file="module.properties"/>
  <property file="version.properties"/>

  <!-- MicroTESK version --> 
  <property name="fullver" value="${module.version.major}.${module.version.minor}.${module.version.build}-${module.version.status}-${module.version.date}"/>

  <!-- Directories -->
  <property name="gen"       location="gen"/>
  <property name="bin"       location="bin"/>

  <property name="dist"      location="dist"/>
  <property name="dist.gen"  location="${dist}/gen"/>
  <property name="dist.jars" location="${dist}/lib/jars"/>
  <property name="dist.ruby" location="${dist}/lib/ruby"/>
  <property name="doc"       location="${dist}/doc"/>

  <property name="microtesk.bin" value="${bin}/microtesk"/>
  <property name="test.bin"      value="${bin}/tests"/>	

  <!-- Output JAR-file -->
  <property name="jar"           value="microtesk.jar"/>
  <!-- Main package -->
  <property name="root.package"  value="ru"/>
  <property name="main.package"  value="${root.package}/ispras/microtesk"/>

  <!-- External JARs -->
  <property name="junit.jar"     value="junit-4.10.jar"/>
  <property name="antlr.jar"     value="antlr-3.4-complete.jar"/>
  <property name="antlr.ant.jar" value="ant-antlr3.jar"/>
  <property name="cli.jar"       value="commons-cli-1.2.jar"/>
  <property name="jruby.jar"     value="jruby.jar"/>
  <property name="fortress.jar"  value="fortress.jar"/>
  <property name="testbase.jar"  value="testbase.jar"/>

  <!-- Information for the JAR manifest -->
  <property name="jar.mainclass" value="ru.ispras.microtesk.MicroTESK"/>	
  <property name="jar.classpath" value="${antlr.jar} ${cli.jar} ${jruby.jar} ${fortress.jar} ${testbase.jar}"/>

  <!-- Classpath for external libraries -->
  <property name="jars.path" value="./jars"/>
  <property name="classpath" value="${jars.path}/${junit.jar}:${jars.path}/${antlr.jar}:${jars.path}/${antlr.ant.jar}:${jars.path}/${cli.jar}:${jars.path}/${jruby.jar}:${jars.path}/${fortress.jar}:${jars.path}/${testbase.jar}"/>
	
  <!-- Options -->
  <property name="debug" value="false"/>

  <!-- Task definition for ANTLR -->
  <taskdef name="ant-antlr3"
	classname="org.apache.tools.ant.antlr.ANTLR3"
  	classpath="${jars.path}/${antlr.ant.jar}"
  />

  <!-- Macro for ANTRL targets -->
  <macrodef name="antlr3">
    <attribute name="grammar.root"/>
    <attribute name="grammar.path"/>
    <attribute name="grammar.name"/>
    <attribute name="grammar.lib"/>
    <sequential>
      <echo message="antlr @{grammar.name}"/>
      <ant-antlr3
        xmlns:antlr="antlib:org/apache/tools/ant/antlr"
        target="@{grammar.root}/@{grammar.path}/@{grammar.name}"
        outputdirectory="${gen}/@{grammar.path}"
        libdirectory="@{grammar.lib}"
        debug="${debug}">
        <classpath>
         <pathelement path="${classpath}"/>
        </classpath>
      </ant-antlr3>
    </sequential>
  </macrodef>

  <!--
  Macro for processing templates. Executes the following command for each
  Ruby template file in the source directory:

  java -jar dist/lib/jars/jruby.jar dist/lib/ruby/microtesk.rb <arch.name> <src.path> <file.name>
  -->
  <macrodef name="templates">
    <attribute name="src.path"/>
    <attribute name="arch.name"/>
    <attribute name="file.name"/>
    <sequential>
      <echo message="templates for @{arch.name} from @{src.path} to file @{file.name}"/>
      <apply executable="java" failonerror="true">
        <env key="MICROTESK_HOME" value="${dist}"/>
        <arg value="-ea"/>
        <arg value="-jar"/>
        <arg value="${dist.jars}/${jruby.jar}"/>
        <arg value="${dist.ruby}/microtesk.rb"/>
        <arg value="@{arch.name}"/>
        <srcfile/>
        <arg value="@{file.name}"/>
        <fileset dir="@{src.path}">
          <include name="**/*.rb"/>
          <exclude name="**/*_base.rb"/>
        </fileset>	
      </apply>
    </sequential>
  </macrodef>

  <!-- Init target, creates dirs -->
  <target name="create.dirs">
    <mkdir dir="${gen}/${simnml_grammar.path}"/>
    <mkdir dir="${gen}/${mmu_grammar.path}"/>
    <mkdir dir="${bin}"/>
    <mkdir dir="${dist}"/>
  </target>

  <!-- Clean target, removes builded dirs and files -->
  <target name="clean">
    <delete dir="${dist}"/>
    <delete dir="${bin}"/>
    <delete includeEmptyDirs="true"><fileset dir="${gen}" includes="**/*"/></delete>
    <delete dir="target"/>
  </target>

  <!-- Target for generating parsers for Sim-nML code from grammars with ANTLR -->
  <property name="simnml_grammar.package" value="translator/simnml/grammar"/>
  <property name="simnml_grammar.path"    value="${main.package}/${simnml_grammar.package}"/>
  <property name="simnml_lexer.name"      value="SimnMLLexer.g"/>
  <property name="simnml_parser.name"     value="SimnMLParser.g"/>
  <property name="simnml_walker.name"     value="SimnMLTreeWalker.g"/>

  <target name="antlr_simnml">
    <antlr3 grammar.name="${simnml_lexer.name}"  grammar.path="${simnml_grammar.path}"
            grammar.root="${src.java.dir}"       grammar.lib="${src.java.dir}/${simnml_grammar.path}"/>
    <antlr3 grammar.name="${simnml_parser.name}" grammar.path="${simnml_grammar.path}"
            grammar.root="${src.java.dir}"       grammar.lib="${src.java.dir}/${simnml_grammar.path}"/>
    <antlr3 grammar.name="${simnml_walker.name}" grammar.path="${simnml_grammar.path}"
            grammar.root="${src.java.dir}"       grammar.lib="${src.java.dir}/${simnml_grammar.path}"/>
  </target>

  <!-- Target for generating parsers for MMU specification code from grammars with ANTLR -->
  <property name="mmu_grammar.package" value="translator/mmu/grammar"/>
  <property name="mmu_grammar.path"    value="${main.package}/${mmu_grammar.package}"/>
  <property name="mmu_lexer.name"      value="MmuLexer.g"/>
  <property name="mmu_parser.name"     value="MmuParser.g"/>
  <property name="mmu_walker.name"     value="MmuTreeWalker.g"/>

  <target name="antlr_mmu">
    <antlr3 grammar.name="${mmu_lexer.name}"           grammar.path="${mmu_grammar.path}"
            grammar.root="${src.java.plugins.mmu.dir}" grammar.lib="${src.java.dir}/${simnml_grammar.path}"/>
    <antlr3 grammar.name="${mmu_parser.name}"          grammar.path="${mmu_grammar.path}"
            grammar.root="${src.java.plugins.mmu.dir}" grammar.lib="${src.java.dir}/${simnml_grammar.path}"/>
    <antlr3 grammar.name="${mmu_walker.name}"          grammar.path="${mmu_grammar.path}"
            grammar.root="${src.java.plugins.mmu.dir}" grammar.lib="${src.java.dir}/${simnml_grammar.path}"/>
  </target>	

  <!-- JavaDoc target, generates documentation for source code in ${src.java.dir} and places it into ${doc}/javadoc -->
  <target name="javadoc" depends="init,antlr_simnml">
    <mkdir dir="${doc}/javadoc"/> 
    <javadoc
      sourcepath="${src.java.dir}:${gen}"
      destdir="${doc}/javadoc"
      classpath="${classpath}"
      author="true"
    />
  </target>

  <!-- JavaDoc target, generates documentation for source code in ${src.java.dir} and ${src.mmu.java.dir} and places it into ${doc}/javadoc -->
  <target name="javadoc_mmu" depends="init,antlr_simnml,antlr_mmu">
    <mkdir dir="${doc}/javadoc"/> 
    <javadoc
      sourcepath="${src.java.dir}:${src.mmu.java.dir}:${gen}"
      destdir="${doc}/javadoc"
      classpath="${classpath}"
      author="true"
    />
  </target>

  <!-- Compiles MicroTESK core (folder ${src.java.dir}) with Javac --> 	
  <target name="javac.core" depends="antlr_simnml">
     <mkdir dir="${microtesk.bin}"/>
     <javac
       srcdir="${src.java.dir}:${gen}"
       destdir="${microtesk.bin}"
       classpath="${classpath}"
       includeantruntime="false"
       deprecation="true"
    />
  </target>

  <!-- Compiles MicroTESK plugins (folder ${src.java.plugins.mmu.dir} + ${src.java.dir}) with Javac --> 	
  <target name="javac.plugins.mmu" depends="antlr_mmu">
     <mkdir dir="${microtesk.bin}"/>
     <javac
       srcdir="${src.java.dir}:${src.java.plugins.mmu.dir}:${gen}"
       destdir="${microtesk.bin}"
       classpath="${classpath}"
       includeantruntime="false"
       deprecation="true"
    />
  </target>

  <!-- Compiles unit tests (${src.test.java.dir} + ${src.test.java.plugins.mmu.dir}) with Javac --> 	
  <target name="javac.test">
     <mkdir dir="${test.bin}"/>
     <javac
       srcdir="${src.test.java.dir}:${src.test.java.plugins.mmu.dir}"
       destdir="${test.bin}"
       classpath="${classpath}:${dist.jars}/${jar}"
       includeantruntime="false"
       deprecation="true"
    />
  </target>

  <!-- Build microtesk.jar from provided object files. -->
  <target name="microtesk.jar">
    <jar destfile="${dist.jars}/${jar}" basedir="${microtesk.bin}">
      <fileset dir="${src.res.dir}"/>
      <fileset dir="${src.res.plugins.mmu.dir}"/>
      <manifest>
        <attribute name="Main-Class" value="${jar.mainclass}"/>
        <attribute name="Class-Path" value="${jar.classpath}"/>
        <attribute name="Title"      value="MicroTESK"/>
        <attribute name="Version"    value="${fullver}"/>
        <attribute name="Vendor"     value="ISP RAS (http://www.ispras.ru)"/>
      </manifest>
    </jar>
  </target>

  <target name="build.jar" depends="javac.core,javac.plugins.mmu,microtesk.jar"/>

  <!-- Copies required text files (Ruby and Bash scripts, nML files to the distributive folder) -->
  <target name="copy.scripts">

    <!-- Copies batch files -->
    <copy todir="${dist}/bin">
      <fileset dir="src/main/scripts" includes="**"/>  
    </copy>

    <!-- Copies Ruby scripts -->
    <copy todir="${dist.ruby}" >  
      <fileset dir="src/main/ruby" includes="**"/>  
    </copy>

    <!-- Copies CPU demo architecture specifications and test templates -->
    <copy todir="${dist}/arch/demo/cpu">
      <fileset dir="src/main/arch/demo/cpu" includes="**"/>  
    </copy>

    <!-- Copies VLIW demo architecture specifications and test templates -->
    <copy todir="${dist}/arch/demo/vliw">
       <fileset dir="src/main/arch/demo/vliw" includes="**"/>  
    </copy>

    <!-- Copies miniMIPS architecture specifications and test templates -->
    <copy todir="${dist}/arch/minimips">
       <fileset dir="src/main/arch/minimips" includes="**">
         <exclude name="templates/insertionsort.rb"/>
       </fileset>
    </copy>

  </target>

  <!-- Copies all required JARS to the distributive folder -->
  <target name="copy.jars">
    <copy file="${jars.path}/${antlr.jar}"    todir="${dist.jars}"/>
    <copy file="${jars.path}/${cli.jar}"      todir="${dist.jars}"/>
    <copy file="${jars.path}/${jruby.jar}"    todir="${dist.jars}"/>
    <copy file="${jars.path}/${fortress.jar}" todir="${dist.jars}"/>
    <copy file="${jars.path}/${testbase.jar}" todir="${dist.jars}"/>
  </target>

  <!-- Copies MicroTESK documentation to the distributive folder -->
  <target name="copy.docs">
    <copy todir="${doc}">
      <fileset dir="xdocs" includes="**"/>  
    </copy>
  </target>

  <target name="copy.text">
    <copy file="src/main/text/README" tofile="${dist}/README"/>
    <copy file="ChangeLog" tofile="${dist}/ChangeLog"/>
    <copy file="NOTICE" tofile="${dist}/NOTICE"/>
    <copy file="LICENSE" tofile="${dist}/LICENSE"/>
    <mkdir dir="${dist}/tools"/>
    <copy file="src/main/text/README_TOOLS" tofile="${dist}/tools/README"/>
  </target>	

  <target name="build.all" depends="init,clean,create.dirs,build.jar,copy.jars,copy.scripts,copy.docs,copy.text,models.jar,pack.all">
  </target>

  <target name="pack.all">
    <tar destfile="${dist}/${module.name}-${fullver}.tar.gz"
         longfile="gnu" compression="gzip">
      <fileset dir="${dist}" excludes="**/gen/bin/**"/>
    </tar>
  </target>

  <!-- Target for generating and building models -->
  <target name="models.jar">

    <!-- Generate code for the DEMO model -->
    <java jar="${dist.jars}/${jar}" fork="true" failonerror="true">
      <jvmarg value="-ea"/>
      <arg value="-d"/>
      <arg value="${dist.gen}/src"/>
      <arg value="${dist}/arch/demo/cpu/model/cpu.nml"/>
      <classpath>
        <pathelement location="${dist.jars}/${jar}"/>
      </classpath>
    </java>

    <!-- Generate code for the simple VLIW model -->
    <java jar="${dist.jars}/${jar}" fork="true" failonerror="true">
      <jvmarg value="-ea"/>
      <arg value="-d"/>
      <arg value="${dist.gen}/src"/>
      <arg value="${dist}/arch/demo/vliw/model/vliw.nml"/>
      <classpath>
        <pathelement location="${dist.jars}/${jar}"/>
      </classpath>
    </java>

    <!-- Generate code for the miniMIPS model -->
    <java jar="${dist.jars}/${jar}" fork="true" failonerror="true">
      <jvmarg value="-ea"/>
      <arg value="-d"/>
      <arg value="${dist.gen}/src"/>
      <arg value="${dist}/arch/minimips/model/minimips.nml"/>
      <classpath>
        <pathelement location="${dist.jars}/${jar}"/>
      </classpath>
    </java>

    <property name="models.classpath"     value="${dist.jars}/${jar}"/>
    <property name="models.jar.classpath" value="${jar}"/>
    <property name="models.bin"           value="${dist.gen}/bin"/>
    <property name="models.jar"           value="${dist.jars}/models.jar"/>

    <mkdir dir="${models.bin}"/>

    <javac
      srcdir="${dist.gen}/src/java"
      destdir="${models.bin}"
      classpath="${models.classpath}"
      includeantruntime="false"
    />

    <mkdir dir="${dist.gen}/src/resources"/>
    <jar destfile="${models.jar}" basedir="${models.bin}">
      <fileset dir="${dist.gen}/src/resources"/>
      <manifest>
        <!-- <attribute name="Main-Class" value="${jar.mainclass}"/> -->
        <attribute name="Class-Path" value="${models.jar.classpath}"/>
        <attribute name="Title"      value="MicroTESK Models"/>
        <attribute name="Version"    value="${fullver}"/>
        <attribute name="Vendor"     value="ISP RAS (http://www.ispras.ru)"/>
      </manifest>
    </jar>
  </target>

  <!-- Test target -->
  <target name="test" depends="javac.test">
    <!-- Compile and run JUnit tests -->
    <path id="classpath.test">
      <pathelement location="jars/junit-4.10.jar"/>
      <pathelement location="${test.bin}"/>
      <pathelement location="${dist.jars}/${jar}"/>
    </path>

  	<mkdir dir="target/tests/reports"/>
    <junit fork="no" printsummary="yes" showoutput="yes">
      <classpath refid="classpath.test"/>
      <formatter type="plain" usefile="false"/>
      <formatter type="xml" usefile="true"/>

      <batchtest haltonfailure="no" todir="target/tests/reports">
        <fileset dir="${src.test.java.dir}" includes="**/*TestCase*.java"/>
        <fileset dir="${src.test.java.plugins.mmu.dir}" includes="**/*TestCase*.java"/>
      </batchtest>
    </junit>

    <!-- Process all test templates included in the distribution package -->
    <templates
      src.path="${dist}/arch/demo/vliw"
      arch.name="vliw"
      file.name="${dist}/test.s"
    />
    <templates
      src.path="${dist}/arch/demo/cpu"
      arch.name="cpu"
      file.name="${dist}/test.s"
    />
    <templates
      src.path="${dist}/arch/minimips"
      arch.name="minimips"
      file.name="${dist}/test.s"
    />
    <delete file="${dist}/test.s"/>
  </target>

</project>
