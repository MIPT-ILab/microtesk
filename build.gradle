/*
 * Copyright 2015-2016 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

import java.text.SimpleDateFormat
import java.util.regex.Matcher

buildscript {
  repositories {
    ivy {
      url = 'http://forge.ispras.ru/repo'
      layout 'pattern', {
        artifact '[organization]/[ext]s/[artifact]-[revision](.[ext])'
      }
    }
    jcenter()
  }

  dependencies {
    classpath 'gradle:gradle-os-plugin:1.0'
  }
}

plugins {
  id 'net.saliman.properties' version '1.4.4'
  id 'net.researchgate.release' version '2.3.5'
  id 'org.sonarqube' version '1.0'
}

apply plugin: 'os'
apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'antlr'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'

repositories {
  maven {
    url 'http://forge.ispras.ru:8082/nexus/content/repositories/releases'
  }
  maven {
    url 'http://forge.ispras.ru:8082/nexus/content/repositories/snapshots'
  }
  ivy {
    url = 'http://forge.ispras.ru/repo'
    layout 'pattern', {
      artifact '[organization]/[ext]s/[artifact]-[revision](.[ext])'
      // z3
      artifact '[organization]/[artifact]-[revision](.[ext])'
    }
  }
  jcenter()
}

uploadArchives {
  repositories {
    mavenLocal()
  }
}

release {
  failOnCommitNeeded = false

  versionPatterns = [
    // Increments build number: "0.2.5-alpha-150428" => "0.2.6-alpha-150428"
    /(^\d+\.\d+\.)(\d+)(-[^-]*)(-[^-]*$)/: 
    { Matcher m, Project p -> m.replaceAll("${ m[0][1] }${ (m[0][2] as int) + 1 }${ m[0][3] }" ) }
  ]
}

String z3
String z3path

String cvc4
String cvc4path

windows {
  z3 = 'z3:z3:4.3.0-x64:@zip'
  z3path = 'tools/z3/bin/z3.exe'

  cvc4 = 'cvc4:cvc4:1.4-win32-opt:@exe'
  cvc4path = 'tools/cvc4-windows.exe'
}

unix {
  z3 = 'z3:z3:x64-4.1:@tar.gz'
  z3path = 'tools/z3/bin/z3'

  cvc4 = 'cvc4:cvc4:2015-05-12-x86_64-linux-opt:@bin'
  cvc4path = 'tools/cvc4-unix.bin'
}

macOs {
  z3 = 'z3:z3:4.3.2.7c12ab47165a-x64-osx-10.8.2:@zip'
  z3path = 'tools/z3/bin/z3'
}

dependencies {
  testCompile 'junit:junit:4.11'
  testCompile 'hamcrest:hamcrest-core:1.3'
  testRuntime z3
  testRuntime cvc4

  antlr 'org.antlr:antlr:3.5'
  compile 'commons-cli:commons-cli:1.2'
  compile 'org.jruby:jruby-complete:1.7.25'

  compile 'fortress:fortress:+'
  compile 'testbase:testbase:+'
  compile 'jsoftfloat:jsoftfloat:+'

  checkstyle 'com.puppycrawl.tools:checkstyle:6.12.1'
  pmd 'net.sourceforge.pmd:pmd-core:5.4.0'
  pmd 'net.sourceforge.pmd:pmd-java:5.4.0'
  findbugs 'com.google.code.findbugs:findbugs:3.0.1'
}

task getZ3(type: Copy) {
  windows {
    from zipTree( configurations.testRuntime.fileCollection { dep -> dep.name == 'z3' }.singleFile )
  }
  unix  {
    from tarTree( configurations.testRuntime.fileCollection { dep -> dep.name == 'z3' }.singleFile )
  }
  macOs {
    from zipTree( configurations.testRuntime.fileCollection { dep -> dep.name == 'z3' }.singleFile )
  }
  into 'tools/z3'
  eachFile { 
    it.relativePath = RelativePath.parse( true, it.relativePath.segments[1..-1].join('/') )
  }
}

test.dependsOn getZ3

task getCVC4(type: Copy) {
  windows {
    from configurations.testRuntime.fileCollection { dep -> dep.name == 'cvc4' }.singleFile
    rename '.*', 'cvc4-windows.exe'
  }
  unix  {
    from configurations.testRuntime.fileCollection { dep -> dep.name == 'cvc4' }.singleFile
    rename '.*', 'cvc4-unix.bin'
  }
  into 'tools'
}

test.dependsOn getCVC4

task copyResources(type: Copy) {
  from "${project.projectDir}/src/main/resources/core/config.xml"
  into "${project.projectDir}/build/resources/test"

  from "${project.projectDir}/src/main/resources/core/stg"
  into "${project.projectDir}/build/resources/test/stg"

  from "${project.projectDir}/src/main/resources/plugins/mmu/stg"
  into "${project.projectDir}/build/resources/test/stg"
}

test.dependsOn copyResources

test {
  environment 'Z3_PATH', z3path
  environment 'CVC4_PATH', cvc4path
  testLogging.showStandardStreams = true
  ignoreFailures = true
}

sourceSets {
  test {
    resources {
      srcDir "${project.projectDir}/build/classes/main"
    }
  }
}

//copying all dependencies attached to 'compile' into a specific folder
task getDependencies(type: Copy) {
  //referring to the 'compile' configuration
  from configurations.compile, configurations.testCompile
  into 'libs'
}

compileJava {
  options.encoding = "UTF-8"
}

generateGrammarSource {
  arguments += ["-lib", "src/main/antlrlib/ru/ispras/microtesk/translator/nml/grammar"]
}

checkstyle {
  toolVersion = 6.5
  ignoreFailures = true
  showViolations = false
  configFile=file("${project.projectDir}/config/checkstyle/google_checks.xml")
}

findbugs {
  ignoreFailures = true
}

pmd {
  ignoreFailures = true
  ruleSets = [ "java-android,java-basic,java-braces,java-clone,java-codesize,java-controversial,"
             + "java-coupling,java-design,java-empty,java-finalizers,java-imports,java-j2ee,"
             + "java-javabeans,java-junit,java-logging-jakarta-commons,java-logging-java,"
             + "java-migrating,java-migrating_to_13,java-migrating_to_14,java-migrating_to_15,"
             + "java-migrating_to_junit4,java-naming,java-optimizations,java-strictexception,"
             + "java-strings,java-sunsecure,java-typeresolution,java-unnecessary,java-unusedcode"]
  ruleSetFiles = files("config/pmd/java/comments.xml")
}

jacoco {
  toolVersion = "0.7.5.201505241946"
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
  }
}

sonarqube {
  properties {
    property "sonar.host.url", "http://forge.ispras.ru:9000"
    property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar"
    property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
    property "sonar.jdbc.username", "sonar"
    property "sonar.jdbc.password", "sonar"
  }
}

jar {
  archiveName = projectName + '.jar'

  from('LICENSE') {
    into('META-INF')
  }

  exclude('*core*')
  exclude('*plugins*')

  from('src/main/resources/core/config.xml')
  from('src/main/resources/core/stg') {
    into('stg')
  }
  from('src/main/resources/plugins/mmu/stg') {
    into('stg')
  }

  manifest {
    attributes 'Title'  : projectTitle
    attributes 'Version': project.version
    attributes 'Vendor' : 'ISP RAS (http://www.ispras.ru)'
    attributes 'Built-By': System.getProperty('user.name')
    attributes 'Built-JDK': System.getProperty('java.version')
    attributes 'Main-Class': mainClassName
    attributes 'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveName = projectName + '-src.jar'
  from(projectDir) {
    into(projectName)
    include('src/')
    include('config/')
  }

  from(files { projectDir.listFiles() }.filter { File file -> file.isFile() ? file : null }) {
    into(projectName)
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveName = projectName + '-javadoc.jar'
  from javadoc.destinationDir
}

task translateCpuDemo(type: JavaExec) {
  classpath = files('build/libs/microtesk.jar')
  classpath += sourceSets.main.runtimeClasspath
  main = mainClassName
  args = [
    '-t',
    'src/main/arch/demo/cpu/model/cpu.nml',
    '-od',
    'build/generated-src/models'
  ]
}

task translateVliwDemo(type: JavaExec) {
  classpath = files('build/libs/microtesk.jar')
  classpath += sourceSets.main.runtimeClasspath
  main = mainClassName
  args = [
    '-t',
    'src/main/arch/demo/vliw/model/vliw.nml',
    '-od',
    'build/generated-src/models'
  ]
}

task translateMiniMips(type: JavaExec) {
  classpath = files('build/libs/microtesk.jar')
  classpath += sourceSets.main.runtimeClasspath
  main = mainClassName
  args = [
    '-t',
    'src/main/arch/minimips/model/minimips.nml',
    'src/main/arch/minimips/model/mmu/minimips.mmu',
    '-od',
    'build/generated-src/models'
  ]
}

task compileModels(type: JavaCompile) {
  source = fileTree(dir: 'build/generated-src/models/src', include: '**/*.java')
  destinationDir = file('build/classes/models')
  classpath = files('build/libs/microtesk.jar')
  classpath += sourceSets.main.runtimeClasspath
}

task jarModels(type: Jar) {
  archiveName = 'models.jar'
  from('build/classes/models')

  manifest {
    attributes 'Title'  : projectTitle + ' Models'
    attributes 'Version': project.version
    attributes 'Vendor' : 'ISP RAS (http://www.ispras.ru)'
    attributes 'Built-By': System.getProperty('user.name')
    attributes 'Built-JDK': System.getProperty('java.version')
    attributes 'Class-Path': projectName + '.jar'
  }
}

distTar.dependsOn.add('jarModels')
jarModels.dependsOn.add('compileModels')
compileModels.dependsOn.add('translateCpuDemo')
compileModels.dependsOn.add('translateVliwDemo')
compileModels.dependsOn.add('translateMiniMips')

distributions {
  main{
    baseName = projectName

    contents {
      rename '(.)*(?<!-src|-javadoc|microtesk).jar', 'jars/$0'
      rename '(.)*microtesk.jar', 'lib/jars/microtesk.jar'

      into('lib') {
        from jarModels
      }

      from('src/main/arch') {
        into('arch')
      }

      from('build/generated-src/models') {
        into('gen')
      }

      from('src/main/bin') {
        into('bin')
      }

      from('src/main/ruby') {
        into('lib/ruby')
      }

      from(sourcesJar) {
        into('src')
      }

      from(javadocJar) {
        into('javadoc')
      }

      from('src/main/etc') {
        into('etc')
      }

      from(fileTree('xdocs').files) {
        into('doc')
        include('**/*microtesk*.pdf')
      }

      from('ChangeLog')
      from('LICENSE')
      from('NOTICE')
      from('src/main/text/README')

      from('src/main/text/README_TOOLS') {
        into('tools')
        rename('README_TOOLS', 'README')
      }
    }
  }
}

def repoUrlStr = 'http://forge.ispras.ru:8082/nexus/content/repositories/'
def repoUserStr = hasProperty('repoUser') ? repoUser : "$System.env._REPO_USER"
def repoPasswordStr = hasProperty('repoPassword') ? repoPassword : "$System.env._REPO_PASSWORD"

publishing {
  publications {
    maven(MavenPublication) {
      groupId projectGroup
      artifactId projectName
      version project.version
      from components.java

      artifact(sourcesJar) {
        classifier = "sources"
      }

      artifact(distTar)
    }
  }

  repositories {
    maven {
      if(project.version.endsWith('-SNAPSHOT')) {
        url repoUrlStr + 'snapshots'
      } else {
        url repoUrlStr + 'releases'
      }
      credentials {
        username repoUserStr
        password repoPasswordStr
      }
      authentication {
        basic(BasicAuthentication)
      }
    }
  }
}

afterReleaseBuild.dependsOn publish
