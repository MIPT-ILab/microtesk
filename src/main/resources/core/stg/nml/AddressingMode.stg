/*
 * Copyright 2012-2015 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

group AddressingMode;

mode(
  name,
  type,
  file,
  pack,
  imps,
  simps,
  base,
  param_names,
  param_types,
  attrs,
  ret,
  except,
  memref,
  load,
  store,
  blocksize) ::= <<
<header(file)>
<package(pack)>
<if(imps)><imports(imps)><endif>
<if(simps)><static_imports(simps)><endif>
<class(["public", "final"], 
       name,
       base,
       false,
       body(name, type, param_names, param_types, attrs, ret,
            except, memref, load, store, blocksize))> 
>>

body(name, type, param_names, param_types, attrs, ret,
     except, memref, load, store, blocksize) ::= <<
<class_string_const("String", "NAME", name)><\n>
<class(["private", "static", "final"],
       "Info",
       "InfoAndRule",
       false,
       info_body(name, type, param_names, param_types,
                 except, memref, load, store, blocksize))
>
<class_const("IInfo", "INFO", "new Info()")><\n>
<mode_constructor(name, param_names)><\n>
<attrs; separator="\n\n">
<if(ret)><\n><mode_attribute("access", "Location", ret:{e|return <e>.setName(syntax());}, true)><endif>
>>

info_body(name, type, param_names, param_types,
          except, memref, load, store, blocksize) ::= <<
Info() {
  super(
      <name>.class,
      "<name>",
      <type>,
      <param_decls(param_names, param_types)>,
      <except>,
      <memref>,
      <load>,
      <store>,
      <blocksize>
  );
}<\n>
@Override
public IAddressingMode create(final <data_map_type()> args) {
  <param_names:{n | final Location <n> = getArgument("<n>", args);}; separator="\n">
  return new <name>(<param_names :{n | <n>}; separator=", ">);
}
>>

data_map_type() ::= <<Map\<String, Object\>>>

param_decls(param_names, param_types) ::= <<
new ArgumentDecls()<param_names, param_types:{n, t | <\n>    .add("<n>", <t>)}>
>>

mode_constructor(name, param_names) ::= <<
<if(param_names)><param_names:mode_param_def(); separator="\n"><\n><endif>
public <name>(<param_names:{n | Location <n>}; separator=", ">) {
  <param_names:{n | this.<n> = <n>;}; separator="\n">
}
>>

mode_param_def(param_name) ::= <<
private final Location <param_name>;
>>

mode_attribute(name, rettype, stmts, override) ::= <<
<if(override)>@Override
<endif>public <rettype> <name>() {
  <stmts; separator="\n">
}
>>
