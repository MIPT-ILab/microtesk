/*
 * Copyright 2016 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

group Decoder;

group_constructor(name, size, is_fixed, items) ::= <<
private <name>() {
  super(<size>, <is_fixed>);<\n>
  <items: {item | add(<item>.get());}; separator="\n">
}
>>

decoder_constructor(name, size, is_fixed, opc, opc_mask, stmts) ::= <<
private <name>() {
  super(
      <size>,
      <is_fixed>,
      <opc>,
      <opc_mask>
      );
}<\n>
public DecoderResult decode(final BitVector image) {
  if (!isOpcMatch(image)) {
    return null;
  }

  resetPosition();<\n>
  <stmts: {stmt | <stmt>}; separator="\n">
}
>>

decoder_result(name, args) ::= <<
<\n>final DecoderResult decoderResult = newResult(new <name>(<args; separator=", ">));
<if(args)><\n><args: {arg | decoderResult.addArgument("<arg>", <arg>);}; separator="\n"><\n><endif>
return decoderResult;
>>

decoder_opc_check(value, size) ::= <<
if (!matchNextOpc(image, BitVector.valueOf("<value>", 2, <size>))) {
  return null;
}
>>

decoder_immediate(name, type) ::= <<
<name> = readNextImmediate(image, <type>);
>>

decoder_primitive(name, type, decoder) ::= <<
<name> = (<type>) readNextPrimitive(image, <decoder>.get());
if (null == <name>) {
  return null;
}
>>
