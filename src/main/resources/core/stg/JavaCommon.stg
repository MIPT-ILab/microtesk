/*
 * Copyright 2012-2015 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

/**
 * The JavaCommon string template group contains string templates that help generate
 * java code. Those templates should be used by all MicroTESK's code generators
 * that generate code in java.  
 */

group JavaCommon;
 
/** 
 * Header for generated Java files.
 *
 * @param file The name of the specification file from which the model (or its part) is generated.
 */

header(file) ::= <<
/*
 * Copyright (c) ISPRAS
 * 
 * Institute for System Programming of Russian Academy of Sciences
 * 
 * 25 Alexander Solzhenitsyn st. Moscow 109004 Russia
 * 
 * All rights reserved.
 * 
 * This file was automatically generated by MicroTEST based on the
 * information contained in <if(file)>the '<file>'<else>a<endif> specification file.
 * 
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */<\n>
>>

/** 
 * Package declaration.
 *
 * @param pack The name of the package the generated class is located in. 
 */

package(pack) ::= "package <pack>;<\n>"

/**
 * Import declarations.
 *
 * @param names Full names of classes to be imported.
 */

imports(names) ::= <<
import <names; separator=";\nimport ">;<\n>
>>

/**
 * Static import declarations.
 *
 * @param names Full names of classes static members of which we want to import.
 */

static_imports(names) ::= <<
import static <names; separator=".*;\nimport static ">.*;<\n>
>>

/** 
 * Class declaration
 */

class(modifs, name, ext, impls, members) ::= <<
<modif_list(modifs)>class <name><base_class(ext)><intf_list(impls)> {
  <members; separator="\n">
}<\n>
>>

class_const(type, name, value) ::= <<
public static final <type> <name> = <value>;
>>

class_string_const(type, name, value) ::= <<
public static final <type> <name> = "<value>";
>>

modif_list(modifs) ::= <<
<if(modifs)><modifs; separator=" "><\ ><endif>
>>

base_class(ext) ::= <<
<if(ext)> extends <ext><endif>
>>

intf_list(impls) ::= <<
<if(impls)> implements <impls; separator=", "><endif>
>>

singleton(type, name) ::= <<
private static <type> <name> = null;

public static <type> get() {
  if (null == <name>) {
    <name> = new <type>();
  }
  return <name>;
}<\n>
>>
