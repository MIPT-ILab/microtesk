/*
 * Copyright (c) 2012 ISPRAS
 * 
 * Institute for System Programming of Russian Academy of Sciences
 * 
 * 25 Alexander Solzhenitsyn st. Moscow 109004 Russia
 * 
 * All rights reserved.
 * 
 * AddressingMode.stg, Dec 7, 2012 1:58:00 PM Andrei Tatarnikov
 */

group AddressingMode;

mode(name, type, file, pack, imps, simps, base, param_names, param_types, attrs, ret) ::= <<
<header(file)>
<package(pack)>
<if(imps)><imports(imps)><endif>
<if(simps)><static_imports(simps)><endif>
<class(["public", "final"], 
       name,
       base,
       false,
       body(name, type, param_names, param_types, attrs, ret))> 
>>

body(name, type, param_names, param_types, attrs, ret) ::= <<
<class_string_const("String", "NAME", name)><\n>
<class(["private", "static", "final"],
       "Info",
       "InfoAndRule",
       false,
       info_body(name, type, param_names, param_types))
>
<class_const("IInfo", "INFO", "new Info()")><\n>
<mode_constructor(name, param_names)><\n>
<attrs; separator="\n\n">
<if(ret)><\n><mode_attribute("access", "Location", ret:{e|return <e>;}, true)><endif>
>>

info_body(name, type, param_names, param_types) ::= <<
Info()
{
    super(
       <name>.class,
       "<name>",
       <type>,
       <param_decls(param_names, param_types)>
    );
}<\n>
@Override
public IAddressingMode create(<data_map_type()> args)
{
    <param_names:{n | final Location <n> = getArgument("<n>", args);}; separator="\n">
    return new <name>(<param_names :{n | <n>}; separator=", ">);
}
>>

data_map_type() ::= <<Map\<String, Data\>>>

param_decls(param_names, param_types) ::= <<
new ParamDecls()<param_names, param_types:{n, t | <\n>    .declareParam("<n>", <t>)}>
>>

mode_constructor(name, param_names) ::= <<
<if(param_names)><param_names:mode_param_def(); separator="\n"><\n><endif>
public <name>(<param_names:{n | Location <n>}; separator=", ">)
{
    <param_names:{n | this.<n> = <n>;}; separator="\n">
}
>>

mode_param_def(param_name) ::= <<
private final Location <param_name>;
>>

mode_attribute(name, rettype, stmts, override) ::= <<
<if(override)>@Override
<endif>public <rettype> <name>()
{
    <stmts; separator="\n">
}
>>
