/*
 * Copyright (c) 2012 ISPRAS
 * 
 * Institute for System Programming of Russian Academy of Sciences
 * 
 * 25 Alexander Solzhenitsyn st. Moscow 109004 Russia
 * 
 * All rights reserved.
 * 
 * Shared.stg, Dec 6, 2012 4:29:53 PM Andrei Tatarnikov
 */
 
group Shared;
 
shared(file, pack, imps, members) ::= <<
<header(file)>
<package(pack)>
<if(imps)><imports(imps)><endif>
<class(["public", "final"], 
       "Shared",
       false,
       false,
       [constructor(), members])> 
>>

constructor() ::= <<
private Shared() {}
>>

let(name, type, value) ::= <<
<class_const(type, name, value)>
>>

type(name, typeid, size) ::= <<
<class_const("Type", name, new_type(typeid, size))>
>>

new_type(typeid, size) ::= <<
Type.<typeid>(<size>)
>>

type_alias(name, alias) ::= <<
<class_const("Type", name, alias)>
>>

memory(name, kind, type, size, alias) ::= <<
<class_const("Memory", name, new_memory(kind, name, type, size, alias))>
>>

new_memory(kind, name, type, size, alias) ::= <<
Memory.<kind>("<name>", <type>, <size><if(alias)>, <alias><endif>)
>>

memory_array(type, name, items) ::= <<
<class_const(type, name, array_items(items))>
>>

array_items(items) ::= <<
{<items; separator=", ">}
>>

new_label(name, memory, index) ::= <<
new Label("<name>", <memory>, <index>)
>>

status(name, def_value) ::= <<
<class_const("Status", name, new_status(name, def_value))>
>>

new_status(name, def_value) ::= <<
new Status("<name>", <def_value>)
>>

resetter(type, name, items) ::= <<
<class_const(type, name, new_resetter(type, items))>
>>

new_resetter(type, items) ::= <<
new <type>(<items; separator=", ">)
>>
