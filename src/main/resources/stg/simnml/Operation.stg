/*
 * Copyright (c) 2012 ISPRAS
 * 
 * Institute for System Programming of Russian Academy of Sciences
 * 
 * 25 Alexander Solzhenitsyn st. Moscow 109004 Russia
 * 
 * All rights reserved.
 * 
 * Operation.stg, Dec 7, 2012 3:27:59 PM Andrei Tatarnikov
 */
 
group Operation;

op(
  name, file, pack, imps, simps, base,
  arg_names, arg_types, arg_checks, arg_tnames,
  attrs,
  shortcuts, shortcut_defs
) ::= <<
<header(file)>
<package(pack)>
<if(imps)><imports(imps)><endif>
<if(simps)><static_imports(simps)><endif>
<class(["public", "final"],
       name,
       base,
       false,
       body(name, arg_names, arg_types, arg_checks, arg_tnames, attrs, shortcuts, shortcut_defs))>
>>

body(name, arg_names, arg_types, arg_checks, arg_tnames, attrs, shortcuts, shortcut_defs) ::= <<
<info(name, arg_names, arg_types, arg_tnames, shortcut_defs)>
<shortcuts>
<class_const("IInfo", "INFO", "new Info()")><\n>
<op_constructor(name, arg_names, arg_types, arg_checks)><\n>
<attrs; separator="\n\n">
>>

///////////////////////////////////////////////////////////////////////////////

info(name, arg_names, arg_types, arg_tnames, shortcut_defs) ::= <<
<class(["private", "static", "final"],
       "Info",
       "InfoAndRule",
       false,
       info_body(name, arg_names, arg_types, arg_tnames))
>
>>

info_body(name, arg_names, arg_types, arg_tnames) ::= <<
Info()
{
    super(
       <name>.class,
       "<name>",
       <new_op_decls(arg_names, arg_tnames)><if(shortcut_defs)>,
       new Shortcuts()
           <shortcut_defs; separator="\n">
       <endif>
    );
}<\n>
@Override
public IOperation create(Map\<String, Object\> args)
{
    <if(arg_names)><arg_names, arg_types:{n, t | final <t> <n> = (<t>) getArgument("<n>", args);}; separator="\n"><\n><endif>
    return new <name>(<arg_names :{n | <n>}; separator=", ">);
}
>>

new_op_decls(arg_names, arg_tnames) ::= <<
new ParamDecls()<arg_names, arg_tnames:{n, t | <\n>    .declareParam("<n>", <t>)}>
>>

///////////////////////////////////////////////////////////////////////////////

shortcut(name, entry, arg_names, arg_tnames, arg_types, op_tree) ::= <<
<class(["private", "static", "final"],
       shortcut_class(entry),
       "InfoAndRule",
       false,
       shortcut_body(name, entry, arg_names, arg_tnames, arg_types, op_tree))
>
>>

shortcut_def(entry, contexts) ::= <<
.addShortcut(new <shortcut_class(entry)>(), <contexts :{c | "<c>"}; separator=",">)
>>

shortcut_class(entry) ::= <<
Info_<entry>
>>

shortcut_name(entry) ::= <<
INFO_<entry>
>>

shortcut_body(name, entry, arg_names, arg_tnames, arg_types, op_tree) ::= <<
<shortcut_class(entry)>()
{
    super(
        <entry>.class,
        "<name>",
        <new_op_decls(arg_names, arg_tnames)>
    );
}<\n>
@Override
public IOperation create(Map\<String, Object\> args)
{
    <if(arg_names)><arg_names, arg_types:{n, t | final <t> <n> = (<t>) getArgument("<n>", args);}; separator="\n"><\n><endif>
    return <op_param(op_tree)>;
}
>>

op_tree_node(name, params) ::= <<
new <name>(<if(params)><\n><params:op_param(); separator=",\n"><\n><endif>)
>>

op_param(p) ::= <<
    <p>
>>

///////////////////////////////////////////////////////////////////////////////

op_constructor(name, arg_names, arg_types, arg_checks) ::= <<
<if(arg_names)><arg_names, arg_types:{n, t | <op_arg_def(n, t)>}; separator="\n"><\n><endif>
public <name>(<arg_names, arg_types:{n, t | <t> <n>}; separator=", ">)
{
<if(arg_checks)><arg_checks; separator="\n"><\n><endif>
<arg_names:op_arg_init(); separator="\n">
}
>>

op_arg_def(name, type) ::= <<
private final <type> <name>;
>>

op_arg_check_opmode(arg_type, arg_name) ::= <<
    assert <arg_type>.INFO.isSupported(<arg_name>);
>>

op_arg_check_imm(arg_type, arg_name) ::= <<
    assert <arg_type>.equals(<arg_name>.getType());
>>

op_arg_init(name) ::= <<
    this.<name> = <name>;
>>

///////////////////////////////////////////////////////////////////////////////

op_attribute(name, rettype, stmts, override) ::= <<
<if(override)>@Override
<endif>public <rettype> <name>()
{
    <stmts; separator="\n">
}
>>
