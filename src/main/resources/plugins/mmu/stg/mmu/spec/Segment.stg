/*
 * Copyright 2015-2017 ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

group Segment;

constructor(name, va, pa, start, end, stmts) ::= <<
private <name>() {
  this("<name>");
}<\n>
private <name>(final String name) {
  super(
      "<name>",
      <va>.get(),
      <pa>.get(),
      <start>,
      <end>
      );
  <if(stmts)><\n><stmts; separator="\n"><endif>
}
>>

constructor_memory(name, stmts) ::= <<
protected <name>(final MmuSubsystem.Builder builder) {
  this(builder, "<name>");
}<\n>
private <name>(final MmuSubsystem.Builder builder, final String name) {
  builder.setName("<name>");<\n>
  <stmts; separator="\n">
}
>>

function(name, members, va, va_name, pa, pa_name) ::= <<
<function_methods(va, va_name, pa, pa_name)><\n>
<class(["public", "static", "final"],
       name,
       false,
       false,
       members)>
>>

function_constructor(name, type, stmts, va, va_name, pa, pa_name) ::= <<
private <type>(final MmuSubsystem.Builder builder, final int instanceIndex, final <va> <va_name>, final <pa> <pa_name>) {
  this(builder, String.format("<name>_%d", instanceIndex), <va_name>, <pa_name>);
}<\n>
private <type>(final MmuSubsystem.Builder builder, final String name, final <va> <va_name>, final <pa> <pa_name>) {
  this.<va_name> = <va_name>;
  this.<pa_name> = <pa_name>;
  <if(stmts)><\n><stmts; separator="\n"><endif>
}
>>

function_methods(va, va_name, pa, pa_name) ::= <<
private int callIndex = 0;<\n>
public final Function newCall(final MmuSubsystem.Builder builder, final <va> <va_name>, final <pa> <pa_name>) {
  return new Function(builder, callIndex++, <va_name>, <pa_name>);
}
>>
