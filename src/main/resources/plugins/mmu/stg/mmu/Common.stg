/*
 * Copyright 2015 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

group MmuCommon;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Structure-related templates

struct_constructor(name, fields) ::= <<
public <name>() {
  <fields; separator="\n">
}
>>

struct_field(name, type) ::= <<
public final <type> <name>;
>>

struct_field_init(name, value) ::= <<
this.<name> = <value>;
>>

struct_body(type, fnames, ftypes, fvalues, fis_struct) ::= <<
<fnames, ftypes:{n, t | public final <t> <n>;}; separator="\n"><\n>
public <type>() {
  <fnames, fvalues:{n, v | this.<n> = <v>;}; separator="\n">
}<\n>
public <type>(final BitVector value) {
  this();
  asBitVector().assign(value);
}<\n>
public void assign(final <type> other) {
  <fnames:{n | this.<n>.assign(other.<n>);}; separator="\n">
}<\n>
public BitVector asBitVector() {
  <if(fnames)>
  return BitVector.newMapping(
      <fnames, fis_struct:{n, fis | <n><if(fis)>.asBitVector()<endif>}; separator=",\n">
      );
  <else>
  return null;
  <endif>
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Address-related templates

struct_get_value(field_name) ::= <<
@Override
public BitVector getValue() {
  return <field_name>;
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Segment-related templates

segment_constructor(name, start, end) ::= <<
private <name>() {
  super(
      <start>,
      <end>
  );
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////

get_data(addr_type, addr_name, data_type, stmts) ::= <<
@Override
public <data_type> getData(final <addr_type> <addr_name>) {
  <stmts; separator="\n">
}
>>

set_data(addr_type, addr_name, data_type, data_name, stmts) ::= <<
@Override
public <data_type> setData(final <addr_type> <addr_name>, final <data_type> <data_name>) {
  <stmts; separator="\n">
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Statement temlates

if_block(expr, stmts)::= <<
if (<expr>) {
  <stmts; separator="\n">
>>

elseif_block(expr, stmts)::= <<
} else if (<expr>) {
  <stmts; separator="\n">
>>

else_block(stmts)::= <<
} else {
  <stmts; separator="\n">
}
>>
