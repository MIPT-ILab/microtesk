/*
 * Copyright 2015 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

group MmuCommon;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Extern-related templates

extern_body(fnames, fvalues) ::= <<
<fnames:{n | public final Reader <n>;}; separator="\n"><\n>
private Extern() {
<fnames, fvalues:{n, v |   this.<n> = <v>;}; separator="\n">
}<\n>
<fnames:{n | <extern_accessor(n)>}; separator="\n\n">
>>

extern_accessor(fname) ::= <<
public BitVector <n>() {
  return <n>.read();
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Structure-related templates

struct_constructor(name, fields) ::= <<
public <name>() {
  <fields; separator="\n">
}
>>

struct_field(name, type) ::= <<
public final <type> <name>;
>>

struct_field_init(name, value) ::= <<
this.<name> = <value>;
>>

struct_body(type, fnames, ftypes, fvalues, fis_struct) ::= <<
<fnames, ftypes:{n, t | public final <t> <n>;}; separator="\n"><\n>
public <type>() {
  <fnames, fvalues:{n, v | this.<n> = <v>;}; separator="\n">
}<\n>
public <type>(final BitVector value) {
  this();
  asBitVector().assign(value);
}<\n>
public void assign(final <type> other) {
  <fnames:{n | this.<n>.assign(other.<n>);}; separator="\n">
}<\n>
@Override
public BitVector asBitVector() {
  <if(fnames)>
  return BitVector.newMapping(
      <fnames, fis_struct:{n, fis | <n><if(fis)>.asBitVector()<endif>}; separator=",\n">
      );
  <else>
  return null;
  <endif>
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Address-related templates

struct_get_value(field_name) ::= <<
@Override
public BitVector getValue() {
  return <field_name>;
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Segment-related templates

segment_constructor(name, start, end) ::= <<
private <name>() {
  super(
      <start>,
      <end>
  );
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Buffer-related templates

buffer_entry(members) ::= <<
<class(["public", "static", "final"],
       "Entry",
       false,
       "Data",
       members)>
>>

buffer_indexer(addr_type, addr_name, expr) ::= <<
private static final Indexer\<<addr_type>\> INDEXER = new Indexer\<<addr_type>\>() {
  @Override
  public BitVector getIndex(final <addr_type> <addr_name>) {
    return <expr>;
  }
};
>>

buffer_matcher(entry_type, addr_type, addr_name, data_name, expr) ::= <<
private static final Matcher\<<entry_type>, <addr_type>\> MATCHER = new Matcher\<<entry_type>, <addr_type>\>() {
  @Override
  public boolean areMatching(final <entry_type> <data_name>, final <addr_type> <addr_name>) {
    return <expr>;
  }
};
>>

buffer_constructor(name, ways, sets, policy) ::= <<
private <name>() {
  super(
    new BigInteger("<sets>", 10),
    <ways>,
    <policy>,
    INDEXER,
    MATCHER
    );
}
>>

memory_constructor(size) ::= <<
private <name>() {
  super(new BigInteger("<size>", 16));
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////

get_size(addr_size, data_size) ::= <<
@Override
public int getAddressBitSize() {
  return <addr_size>;
}<\n>
@Override
public int getDataBitSize() {
  return <data_size>;
}
>>

get_data_size(size) ::= <<
protected int getDataBitSize() {
  return <size>;
}
>>

new_data(type) ::= <<
@Override
protected <type> newData(final BitVector value) {
  return new <type>(value);
}
>>

new_address(type) ::= <<
@Override
protected <type> newAddress() {
  return new <type>();
}
>>

get_data(addr_type, addr_name, data_type, stmts) ::= <<
@Override
public <data_type> getData(final <addr_type> <addr_name>) {
  <stmts; separator="\n">
}
>>

set_data(addr_type, addr_name, data_type, data_name, stmts) ::= <<
@Override
public <data_type> setData(final <addr_type> <addr_name>, final <data_type> <data_name>) {
  <stmts; separator="\n">
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Statement templates

if_block(expr, stmts)::= <<
if (<expr>) {
  <stmts; separator="\n">
>>

elseif_block(expr, stmts)::= <<
} else if (<expr>) {
  <stmts; separator="\n">
>>

else_block(stmts)::= <<
} else {
  <stmts; separator="\n">
}
>>
