/*
 * Copyright 2015 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

group Specification;

body(name, spec, members, stmts) ::= <<
private final <spec> spec;
<\n><members : {m | <m>}; separator="\n">
<separator("Constructor")>
public <name>() {
  final <spec>.Builder builder = new <spec>.Builder();<\n>
  <stmts : {stmt | <stmt>}; separator="\n"><\n>
  this.spec = builder.build();
}

public <spec> getSpecification() {
  return spec;
}
>>

separator(text) ::= <<
// ===============================================================================================
// <text>
// ===============================================================================================
>>

variable_def(id, name, size) ::= <<
private final IntegerVariable <id> = new IntegerVariable("<name>", <size>);
>>

type_def(name, value_name) ::= <<
private final MmuAddressType <name> = new MmuAddressType(null, <value_name>);<\n>
>>

type_reg(name) ::= <<
builder.registerAddress(<name>);
>>

segment_def(name, va, pa, start, end, mapped, va_expr, pa_expr) ::= <<
private final MmuSegment <name> = new MmuSegment(
    "<name>",
    <va>,
    <pa>,
    <start>,
    <end>,
    <mapped>,
    <va_expr>,
    <pa_expr>
    );<\n>
>>

segment_reg(name) ::= <<
builder.registerSegment(<name>);
>>

buffer_def(name, ways, sets, addr, tag, index, offset, match,
           guard_cond, guard, replaceable, parent, fields) ::= <<
private final MmuBuffer <name> = new MmuBuffer(
    "<name>",
    <ways>,
    <sets>,
    <addr>,
    <tag>,
    <index>,
    <offset>,
    <match>,  // TODO
    <guard_cond>,  // TODO
    <guard>,  // TODO
    <replaceable>,
    <parent>
    );
{
  <fields : {field | <name>.addField(<field>);}; separator="\n">
}<\n>
>>

buffer_reg(name) ::= <<
builder.registerBuffer(<name>);
>>

