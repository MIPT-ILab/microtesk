/*
 * Copyright 2012-2016 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

lexer grammar NmlLexer;

options {
  language=Java;
}

import commonLexer=CommonLexer;

@header {
/*
 * Copyright 2012-2016 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 * WARNING: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DO NOT MODIFY IT.
 */

package ru.ispras.microtesk.translator.nml.grammar;

import ru.ispras.microtesk.translator.antlrex.Preprocessor;
import ru.ispras.microtesk.translator.antlrex.symbols.SymbolTable;
import ru.ispras.fortress.util.InvariantChecks;
}

@members {
private Preprocessor pp = null;

public NmlLexer(final CharStream chars, final Preprocessor pp, final SymbolTable symbols) {
  this(chars);

  commonLexer.setPreprocessor(pp);
  this.pp = pp;

  commonLexer.setSymbols(symbols);
}

private void pp() {
  if(pp.isHidden()) {
    skip();
  }
}}

//==================================================================================================
// Keywords
//==================================================================================================

/* Declaration Keywords */
LET       : 'let'       { pp(); };
TYPE      : 'type'      { pp(); };
MEM       : 'mem'       { pp(); };
REG       : 'reg'       { pp(); };
VAR       : 'var'       { pp(); };
ALIAS     : 'alias'     { pp(); };
MODE      : 'mode'      { pp(); };
OP        : 'op'        { pp(); };
PSEUDO    : 'pseudo'    { pp(); };

/* Standard Attributes */
SYNTAX    : 'syntax'    { pp(); };
IMAGE     : 'image'     { pp(); };
ACTION    : 'action'    { pp(); };

/* Data Types */
BOOL      : 'bool'      { pp(); };
CARD      : 'card'      { pp(); };
FIX       : 'fix'       { pp(); };
FLOAT     : 'float'     { pp(); };
INT       : 'int'       { pp(); };
ENUM      : 'enum'      { pp(); };

//==================================================================================================
// The End
//==================================================================================================
