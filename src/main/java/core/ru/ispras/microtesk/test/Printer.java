/*
 * Copyright 2014-2015 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package ru.ispras.microtesk.test;

import static ru.ispras.fortress.util.InvariantChecks.checkNotNull;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import java.util.List;

import ru.ispras.microtesk.model.api.exception.ConfigurationException;
import ru.ispras.microtesk.model.api.state.IModelStateObserver;
import ru.ispras.microtesk.test.sequence.Sequence;
import ru.ispras.microtesk.test.template.ConcreteCall;
import ru.ispras.microtesk.test.template.Label;
import ru.ispras.microtesk.test.template.Output;
import ru.ispras.microtesk.utils.PrintingUtils;

/**
 * The Printer class is responsible for printing generated symbolic test programs (sequences of
 * concrete calls to a file and to the screen).
 * 
 * @author Andrei Tatarnikov
 */

final class Printer {
  private static final String HEADER_FRMT =
    "%sThis test program was automatically generated by MicroTESK\n" +
    "%sGeneration started: %s\n%s\n" +
    "%sInstitute for System Programming of the Russian Academy of Sciences (ISPRAS)\n" +
    "%s25 Alexander Solzhenitsyn st., Moscow, 109004, Russia\n" +
    "%shttp://forge.ispras.ru/projects/microtesk";

  private final PrintWriter fileWritter;
  private final IModelStateObserver observer;
  private final String commentToken;
  private final boolean printToScreen;

  private boolean isHeaderPrinted;

  private static int LINE_WIDTH = 80;
  private final String separator;

  /**
   * Constructs a printer object.
   * 
   * @param fileName Test program file name (if null or empty no file is generated),
   * @param observer Model state observer to evaluate outputs.
   * @param commentToken Token for comments (used to generate the header).
   * @param printToScreen Specifies whether the test program is to be printed to the screen.
   * 
   * @throws NullPointerException if the observer or commentToken parameter is null.
   * @throws IOException if failed to open the specified file for writing.
   */

  public Printer(String fileName, IModelStateObserver observer, String commentToken,
      boolean printToScreen) throws IOException {

    checkNotNull(observer);
    checkNotNull(commentToken);

    this.fileWritter = createFileWritter(fileName);
    this.observer = observer;
    this.commentToken = commentToken;
    this.printToScreen = printToScreen;
    this.isHeaderPrinted = false;

    this.separator = commentToken + 
        newSeparatorString(LINE_WIDTH - commentToken.length());
  }

  private static String newSeparatorString(int length) {
    final StringBuilder sb = new StringBuilder();
    while (sb.length() < length) {
      sb.append('*');
    }
    return sb.toString();
  }

  /**
   * Check whether printing to screen is enabled.
   * 
   * @return {@code true} if printing to screen is enabled or {@code false} otherwise.
   */

  public boolean isPrintToScreenEnabled() {
    return printToScreen;
  }

  /**
   * Prints the specified instruction call sequence.
   * 
   * @param sequence Instruction call sequence.
   * @throws NullPointerException if the parameter is null.
   * @throws ConfigurationException if failed to evaluate one of the output object associated with
   *         an instruction call in the sequence.
   */

  public void printSequence(Sequence<ConcreteCall> sequence) throws ConfigurationException {
    checkNotNull(sequence);

    for (ConcreteCall inst : sequence) {
      printOutputs(inst.getOutputs());
      printLabels(inst.getLabels());
      printText(inst.getText());
    }
  }

  /**
   * Closes the generated file.
   */

  public void close() {
    if (null != fileWritter) {
      fileWritter.close();
    }
  }

  private static PrintWriter createFileWritter(String fileName) throws IOException {
    if ((null == fileName) || fileName.isEmpty()) {
      return null;
    }

    final FileWriter outFile = new FileWriter(fileName);
    return new PrintWriter(outFile);
  }

  private void printOutputs(List<Output> outputs) throws ConfigurationException {
    checkNotNull(outputs);

    for (Output output : outputs) {
      if (!output.isRuntime()) {
        printText(output.evaluate(observer));
      }
    }
  }

  private void printLabels(List<Label> labels) {
    checkNotNull(labels);

    for (Label label : labels) {
      printText(label.getUniqueName() + ":");
    }
  }
  
  /**
   * Prints text both to the file and to the screen (if corresponding options are enabled).
   * @param text Text to be printed.
   */

  public void printText(String text) {
    if (text != null) {
      printToScreen(text);
      printToFile(text);
    }
  }

  /**
   * Prints MicroTESK information to the file (as the top file header). 
   */

  public void printToolInfoToFile() {
    if (isHeaderPrinted) {
      return;
    }

    printSeparatorToFile();

    final String slcs = commentToken;
    final String header = String.format(
        HEADER_FRMT, slcs, slcs, new Date(), slcs, slcs, slcs, slcs);

    printToFile(header);
    isHeaderPrinted = true;

    printSeparatorToFile();
    printNewLineToFile();
  }

  /**
   * Prints a special header comment that specifies the start of a code section. 
   * 
   * @param text Text of the header.
   */

  public void printHeaderToFile(String text) {
    printSeparatorToFile();
    printCommentToFile(text);
    printSeparatorToFile();
    printNewLineToFile();
  }

  /**
   * Prints a comment to the file.
   * 
   * @param text Text of the comment to be printed.
   */

  public void printCommentToFile(String text) {
    if (text != null) {
      printToFile(commentToken + text);
    }
  }

  /**
   * Prints a special comment (a line of '*' characters) to the file to
   * separate different parts of the code.
   */

  public void printSeparatorToFile() {
    printToFile(separator);
  }

  /**
   * Prints a special comment (text wrapped in '*' characters) to the file to
   * separate different parts of the code.
   * 
   * @param text Text of the separator.
   */

  public void printSeparatorToFile(String text) {
    final int prefixLength = (LINE_WIDTH - text.length()) / 2;
    final int postfixLength = LINE_WIDTH - prefixLength - text.length();
    final StringBuilder sb = new StringBuilder();

    sb.append(commentToken);
    sb.append(newSeparatorString(prefixLength - commentToken.length() - 1));
    sb.append(' ');
    sb.append(text);
    sb.append(' ');
    sb.append(newSeparatorString(postfixLength - 1));

    printToFile(sb.toString());
  }

  /**
   * Add a new line separator to the file.
   */

  public void printNewLineToFile() {
    printToFile("");
  }

  private void printToScreen(String text) {
    if (printToScreen) {
      PrintingUtils.trace(text);
    }
  }

  private void printToFile(String text) {
    if (null != fileWritter) {
      fileWritter.println(text);
    }
  }
}
