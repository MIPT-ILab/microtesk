/*
 * Copyright 2012-2015 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

tree grammar MmuTreeWalker;

//==================================================================================================
// Options
//==================================================================================================

options {
  language=Java;
  tokenVocab=MmuParser;
  ASTLabelType=CommonTree;
  superClass=TreeWalkerBase;
}

@rulecatch {
catch(SemanticException se) {
    reportError(se);
    recover(input,se);
}
catch (RecognitionException re) {
    reportError(re);
    recover(input,re);
}
}

//==================================================================================================
// Header for the Generated Java File
//==================================================================================================

@header {
/*
 * Copyright 2012-2015 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 * WARNING: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DO NOT MODIFY IT. 
 */

package ru.ispras.microtesk.translator.mmu.grammar;

import ru.ispras.microtesk.translator.antlrex.Where;
import ru.ispras.microtesk.translator.antlrex.SemanticException;

import ru.ispras.microtesk.translator.simnml.antlrex.TreeWalkerBase;
}

//==================================================================================================
// MMU Specification
//==================================================================================================

startRule 
    : declaration*
    ;

declaration
    : address
    | buffer
    | memory
    ;

//==================================================================================================
// Address
//==================================================================================================

address
    : ^(MMU_ADDRESS ID
        (
            ^(MMU_WIDTH expr)
          | ^(MMU_SEGMENT ID expr expr)
          | ^(MMU_FORMAT ID (ID expr expr?)+)
        )*
      )
    ;

//==================================================================================================
// Buffer
//==================================================================================================

buffer
    : ^(MMU_BUFFER ID ID ID
        (
            ^(MMU_WAYS expr)
          | ^(MMU_SETS expr)
          | ^(MMU_FORMAT ID (ID expr expr?)+)
          | ^(MMU_INDEX expr)
          | ^(MMU_MATCH expr)
          | ^(MMU_POLICY ID)
        )*
      )
    ;

//==================================================================================================
// Memory
//==================================================================================================

memory
    : ^(MMU_MEMORY ID ID ID
        (
            ^(MMU_READ sequence)
          | ^(MMU_WRITE sequence)
        )*
      )
    ;

//==================================================================================================
// Common
//==================================================================================================

// TODO:
expr
    : PLUS
;

// TODO:
sequence
    : MINUS
;

//==================================================================================================
// The End
//==================================================================================================