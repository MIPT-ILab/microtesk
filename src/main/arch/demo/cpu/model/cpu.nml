/*
 * Copyright 2014 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

/*
 * Description:
 *
 * Example of a specification of a trivial microprocessor ISA.
 * Provided to demonstrate various features of Sim-nML.
 */

let COMMENT = "This is a demo Sim-nML specification."

let MSIZE = 2 ** 8
let  REGS = 16

type  index = card(8)
type nibble = card(4)
type byte_t = int(8)

mem  M[MSIZE, byte_t]
reg  R[REGS,  byte_t]
reg PC[1,     index]

var SRC1[1, byte_t]
var SRC2[1, byte_t]
var DEST[1, byte_t]

mode IMM(i: byte_t) = i
  syntax = format("[%d]", i)
  image  = format("11%4b", i)

mode MEM(i: index) = M[i]
  syntax = format("(%d)", i)
  image  = format("%6b", i)

mode IREG(i: nibble) = M[R[i]]
  syntax = format("(R%d)", i)
  image  = format("00%4b", i)

mode REG(i: nibble) = R[i]
  syntax = format("R%d", i)
  image  = format("01%4b", i)

mode OPRNDL = MEM | REG | IREG
mode OPRNDR = OPRNDL | IMM

op ADD()
  syntax = "add"
  image  = "00"
  action = { DEST = SRC1 + SRC2; }

op SUB()
  syntax = "sub"
  image  = "01"
  action = { DEST = SRC1 - SRC2; }

op MOV()
  syntax = "mov"
  image  = "10"
  action = { DEST = SRC2; }

op ADD_SUB_MOV = ADD | SUB | MOV

op arith_mem_instr(y: ADD_SUB_MOV, op1: OPRNDL, op2: OPRNDR)
  syntax = format("%s %s %s", y.syntax, op1.syntax, op2.syntax)
  image  = format("%s %s 00%s", y.image, op1.image, op2.image)
  action = {
    SRC1 = op1;
    SRC2 = op2;
    y.action;
    op1 = DEST;
    PC = PC + 2;
  }

op J (target : index)
  syntax = format("j %d", target)
  image  = format("011%b", target)
  action = { PC = target; }

op JR (rs : REG)
  syntax = format("jr %s", rs.syntax)
  image  = format("101%s", rs.image)		      
  action = { PC = rs; }

op branch_instr = J 
                | JR

op instruction = arith_mem_instr
               | branch_instr 
