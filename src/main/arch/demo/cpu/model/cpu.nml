/*
 * Copyright 2014 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

/*
 * Description:
 *
 * Example of a specification of a trivial microprocessor ISA.
 * Provided to demonstrate various features of nML.
 */

////////////////////////////////////////////////////////////////////////////////
// Constants

let   MEM_SIZE = 2 ** 8 // Memory size, 2 to the power of 8
let REG_NUMBER = 16     // Number of general-purpose registers

////////////////////////////////////////////////////////////////////////////////
// Types

type  INDEX = card(8) // 8-bit unsigned integer 
type NIBBLE = card(4) // 4-bit unsigned integer
type   BYTE = int(8)  // 8-bit signed integer

////////////////////////////////////////////////////////////////////////////////
// Registers and Memory

// General-purpose registers. 
reg GPR[REG_NUMBER, BYTE] // Format: <name>[<number>, <type>]

// A register for storing the program counter. 
reg PC[INDEX] // This format means that there is 1 register of type INDEX

// A memory line
mem M[MEM_SIZE, BYTE]

////////////////////////////////////////////////////////////////////////////////
// Temporary Variables 
//
// They are not preserved across instruction calls and serve to exchange data
// between operations that make up an instruction. 

var SRC1[BYTE]
var SRC2[BYTE]
var DEST[BYTE]

////////////////////////////////////////////////////////////////////////////////
// Addressing Modes

// An addressing mode for an immediate value. 
mode IMM(i: BYTE) = i             // Value expression
  syntax = format("[%d]", i)      // Textual format
  image  = format("%6b", i<0..5>) // Binary format

// An addressing mode for a register access.
mode REG(i: NIBBLE) = GPR[i]
  syntax = format("R%d", i)
  image  = format("00%4b", i)

// An addressing mode for a memory access.
mode MEM(i: INDEX) = M[i]
  syntax = format("(%d)", i)
  image  = format("%6b", i<0..5>)

// Addressing modes are united into groups.
mode OPRNDL = MEM | REG
mode OPRNDR = OPRNDL | IMM

////////////////////////////////////////////////////////////////////////////////
// Arithmetic and Logic Instructions

op ADD()
  syntax = "add"
  image  = "00"
  action = { 
    DEST = SRC1 + SRC2;
    // Function 'trace' prints text messages to the simulator log
    trace("%d + %d = %d", SRC1, SRC2, DEST);   
  }

op SUB()
  syntax = "sub"
  image  = "01"
  action = { DEST = SRC1 - SRC2; }

op MOV()
  syntax = "mov"
  image  = "10"
  action = { DEST = SRC2; }

// A common alias for ADD, SUB and MOV
op ALU = ADD | SUB | MOV

// A common specification of all ALU instructions that describes their common
// format, performs all common actions and delegates unique responsibilities 
// to specific operations (or subinstructions).  

op alu_instr(command: ALU, op1: OPRNDL, op2: OPRNDR)
  syntax = format("%s %s %s", command.syntax, op1.syntax, op2.syntax)
  image  = format("%s%s00%s", command.image, op1.image, op2.image)
  action = {
    SRC1 = op1;
    SRC2 = op2;
    command.action;
    op1 = DEST;
    PC = PC + 2;
  }

////////////////////////////////////////////////////////////////////////////////
// Control Transfer Instructions

// Transfers control to the specified address.
//
// IMPORTANT NOTE: The target address can be specified via a label. In order to
// use the label name rather than an address constant in the generated test
// program, the <label> tag should be included in the specification of
// instruction's syntax. It must be put between the '%' character and the
// converter token (e.g 'd'). See the code below.

op J (target : INDEX)
  syntax = format("j %<label>d", target)
  image  = format("011%b", target)
  action = { PC = target; }

// Transfers control to the specified address if source equals 0.
op JZ (source: OPRNDL, target : INDEX)
  syntax = format("jz %<label>d", target)
  image  = format("111%b", target)
  action = {
    if source == 0 then
      PC = target;
    endif;
  }

op branch_instr = J | JZ 

////////////////////////////////////////////////////////////////////////////////
// Entry Point
//
// By nML conventions, the "instruction" operation is the root of the tree 
// describing a microprocessor ISA.

op instruction = alu_instr
               | branch_instr 
