address VA(value: 16)
address PA(value: 14)

segment DIRECT (va: VA) = (pa: PA)
  range = (0xc0000000, 0xffffffff)
  read = {
    pa.value = va.value<13..0>;
  }

memory buffer PageTable(va: VA)
  ways = 1
  sets = 2 ** 6
  entry = (vpn: 6, pfn: 6, unused: 4)
  index = va.value<13..8>
  match = va.value<13..8> == vpn

segment MAPPED (va: VA) = (pa: PA)
  range = (0x00000000, 0x3fffffff)

var pageTableVa: VA;
var pageTableEntry: PageTable.entry;

  read = {
    pageTableVa.value = 0;
    pageTableVa.value<15..14> = 0b11;
    pageTableVa.value<6..1> = va.value<13..8>;

    pageTableEntry = PageTable(pageTableVa);

    if (pageTableEntry.vpn != va.value<13..8>) then
      exception("AddressError");
    endif;

    pa.value<13..8> = pageTableEntry.pfn;
    pa.value<7..0> = va.value<7..0>;
  }

function TranslateAddress(va: VA): PA
var pa: PA;
{
  if (va.value<0> != 0) then
    exception("AddressError");
  endif;

  if (DIRECT(va).hit) then
    pa = DIRECT(va);
  elif (MAPPED(va).hit) then
    pa = MAPPED(va);
  else
    exception("AddressError");
  endif;

  return pa;
}

buffer MEM (pa: PA)
  ways  = 1
  sets  = 2 ** 13
  entry = (data: 16)
  index = pa.value<13..1>
  match = 0

mmu vmem (va: VA) = (data: 16)
  var pa: PA;
  var memEntry: MEM.entry;

  read = {
    pa = TranslateAddress(va);
    memEntry = MEM(pa);
    data = memEntry.data;
  }

  write = {
    pa = TranslateAddress(va);
    memEntry.data = data;
    MEM(pa) = memEntry;
  }
