/* 
 * Copyright (c) 2008 ISPRAS
 *
 * Institute for System Programming of Russian Academy of Sciences
 * 25 B.Kommunisticheskaya st. Moscow 109004 Russia
 *
 * All rights reserved.
 *
 * $Id: DefaultTestProgramTemplate.java,v 1.11 2009/08/14 14:40:50 kamkin Exp $
 */

package com.unitesk.testfusion.core.engine;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import com.unitesk.testfusion.core.context.GeneratorContext;
import com.unitesk.testfusion.core.model.Program;

/**
 * Default test program template.
 * 
 * @author <a href="mailto:kamkin@ispras.ru">Alexander Kamkin</a>
 */
public class DefaultTestProgramTemplate extends TestProgramTemplate
{
    /**
     * Returns the header of the test program.
     * 
     * @return the header of the test program.
     */
    public String getHeader()
    {
        StringBuffer buffer = new StringBuffer();
        
        Date date = new Date();
        GregorianCalendar calendar = new GregorianCalendar();
        
        String leftBracket  = supportMultilineComments() ? getOpeningBracket() : singleLineComment();
        String rightBracket = supportMultilineComments() ? " " + getClosingBracket() : singleLineComment();
        String startString  = supportMultilineComments() ? " " + getStartString() : singleLineComment();
        
        buffer.append("\t"  + leftBracket  + "\n");
        buffer.append("\t" + startString  + " Copyright (c) " + calendar.get(Calendar.YEAR) + " ISPRAS\n");
        buffer.append("\t" + startString  + "\n");
        buffer.append("\t" + startString  + " Institute for System Programming of the Russian Academy of Sciences\n");
        buffer.append("\t" + startString  + " 25, A.Solzhenitsyn Street, Moscow, 109004, Russia\n");
        buffer.append("\t" + startString  + " http://hardware.ispras.ru\n");
        buffer.append("\t" + startString  + "\n");
        buffer.append("\t" + startString  + " All rights reserved.\n");
        buffer.append("\t" + startString  + "\n");
        buffer.append("\t" + startString  + " Generated by MicroTESK: " + date + "\n");
        buffer.append("\t" + rightBracket + "\n");
        buffer.append("\n");
        
        return buffer.toString();
    }

    /**
     * Returns the footer of the test program.
     * 
     * @return the footer of the test program.
     */
    @Override
    public String getFooter()
    {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append("\t" + singleLineComment() + " End of the test program");
        buffer.append("\n");
        
        return buffer.toString();
    }

    /**
     * Returns the empty test situation prefix.
     * 
     * @return the empty test situation prefix.
     */
    @Override
    public Program getTestSituationPrefix(GeneratorContext context, boolean first, boolean last)
    {
        Program program = new Program();

        return program;
    }

    /**
     * Returns the empty test action prefix.
     * 
     * @return the empty test action prefix.
     */
    @Override
    public Program getTestActionPrefix(GeneratorContext context, boolean first, boolean last)
    {
        Program program = new Program();
        
        return program;
    }
    
    /**
     * Returns the empty test action suffix.
     * 
     * @return the empty test action suffix.
     */
    @Override
    public Program getTestActionSuffix(GeneratorContext context, boolean first, boolean last)
    {
        Program program = new Program();
        
        return program;
    }

    /**
     * Returns the empty test program predix.
     * 
     * @return the empty test program prefix.
     */
    @Override
    public Program getTestPrefix(GeneratorContext context)
    {
        Program program = new Program();
        
        return program;
    }

    /**
     * Returns the empty test program suffix.
     * 
     * @return the empty test program suffix.
     */
    @Override
    public Program getTestSuffix(GeneratorContext context)
    {
        Program program = new Program();
        
        return program;
    }

    /**
     * Returns token <code>"//"</code>, which is a beginning of single line
     * comment.
     * 
     * @return <code>"//"</code>.
     */
    @Override
    public String singleLineComment()
    {
        return "//";
    }

    /**
     * Returns <code>true</code>, which means that multiline comments are
     * supported.
     * 
     * @return <code>true</code>.
     */
    @Override
    public boolean supportMultilineComments()
    {
        return true;
    }

    /**
     * Returns token <code>"/ *"</code>, which is the opening bracket of
     * multiline comment.
     * 
     * @return <code>"/ *"</code>.
     */
    @Override
    public String getOpeningBracket()
    {
        return "/*";
    }

    /**
     * Returns token <code>"* /"</code>, which is the opening bracket of
     * multiline comment.
     * 
     * @return <code>"* /"</code>.
     */
    @Override
    public String getClosingBracket()
    {
        return "*/";
    }

    /**
     * Returns token <code>"*"</code>, which is a character used in full-line
     * separator comments.
     * 
     * @return <code>"*"</code>.
     */
    @Override
    public String getStartString()
    {
        return "*";
    }
}
